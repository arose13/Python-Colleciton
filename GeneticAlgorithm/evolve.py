# Simple Evolution
import random
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as graph

# TARGET = 'To be or not to be, that is my question. Because hard string have few repeats'
TARGET = 'Stephen & Karissa'
DNA_SIZE = len(TARGET)
N = len(TARGET) * 10
MAX_GENERATIONS = int(25e3)
MUTATION_RATE = 100


# Helper Functions

def weighted_choice(items):
    weight_total = sum((item[1] for item in items))
    n = random.uniform(0, weight_total)
    for item, weight in items:
        if n < weight:
            return item
        n = n - weight
    return item


def random_character():
    return chr(int(random.randrange(32, 126, 1)))


def random_population():
    """
    Return a list of size N of individuals. Each randomly generated by using DNA_SIZE
    """
    population = []
    for i in range(N):
        dna = ''
        for c in range(DNA_SIZE):
            dna += random_character()
        population.append(dna)
    return population


# Genetic Algorithm Functions

def fitness_function(dna):
    fitness = 0
    for c in range(DNA_SIZE):
        fitness += abs(ord(dna[c]) - ord(TARGET[c]))
    return fitness


def mutate(dna):
    dna_out = ''
    for c in range(DNA_SIZE):
        if int(random.random() * MUTATION_RATE) == 1:
            dna_out += random_character()
        else:
            dna_out += dna[c]
    return dna_out


def sex(mom, dad):
    pos = int(random.random() * DNA_SIZE)
    return mom[:pos] + dad[pos:], mom[pos:] + dad[:pos]


if __name__ == '__main__':
    # Initialise
    sns.set_style('whitegrid')
    progress = []
    real_pop = random_population()

    for generation in range(MAX_GENERATIONS + 1):
        current_fitness = fitness_function(real_pop[0])
        print('Generation: {}, Sample from Population: {}, Fitness: {}, N: {}, mu: {}'.format(
            generation, real_pop[0], current_fitness, N, MUTATION_RATE
        ), end='\n')
        progress.append(current_fitness)
        weighted_population = []

        for individual in real_pop:
            i_fitness = fitness_function(individual)

            if i_fitness == 0:
                pair = (individual, 1.0)
            else:
                pair = (individual, 1.0/i_fitness)

            weighted_population.append(pair)

        real_pop = []

        # Select 2 random individuals
        for _ in range(int(N / 2)):
            # Select
            ind1 = weighted_choice(weighted_population)
            ind2 = weighted_choice(weighted_population)

            # FUCK
            ind1, ind2 = sex(ind1, ind2)

            # Mutate and add back into the population.
            real_pop.append(mutate(ind1))
            real_pop.append(mutate(ind2))

        # Check for premature termination
        if real_pop[0] == TARGET:
            break

    # Display Best String
    fittest_individual = real_pop[0]
    min_fitness = fitness_function(real_pop[0])

    for individual in real_pop:
        individual_fitness = fitness_function(individual)
        if individual_fitness <= min_fitness:
            fittest_individual = individual
            min_fitness = individual_fitness

    print('')
    print('Fittest String: {}'.format(fittest_individual))

    graph.plot(progress, alpha=0.33)
    graph.plot(pd.Series(progress).ewm(span=50).mean(), linewidth=3)
    graph.ylabel('Fitness')
    graph.xlabel('Generations')
    graph.show()
